var iterator;
iterator.var copy.=({
    #
    except(args.size(), WrongNumerOfArgumentException, "Expected three arguments");
    except(instanceOf(args[0].get(), Iterator), WrongTypeOfArgumentException, "Expected Iterator");
    except(instanceOf(args[1].get(), Iterator), WrongTypeOfArgumentException, "Expected Iterator");
    except(instanceOf(args[2].get(), Iterator), WrongTypeOfArgumentException, "Expected Iterator");
    #
    auto outIt.=(args[2].get());
    for (auto it.=(args[0].get()).!=, args[1].get(), it.++, {
        outIt.get().=(it.get());
        outIt.++();
    });
    return(outIt);
});

iterator.var move.=({
    #
    except(args.size(), WrongNumerOfArgumentException, "Expected three arguments");
    except(instanceOf(args[0].get(), Iterator), WrongTypeOfArgumentException, "Expected Iterator");
    except(instanceOf(args[1].get(), Iterator), WrongTypeOfArgumentException, "Expected Iterator");
    except(instanceOf(args[2].get(), Iterator), WrongTypeOfArgumentException, "Expected Iterator");
    #
    auto outIt.=(args[2].get());
    for (auto it.=(args[0].get()).!=, args[1].get(), it.++, {
        outIt.<-(it.get());
        outIt.++();
    });
    return(outIt);
});

iterator.var merge.=({
    auto itA.=(args[0].get());
    auto endA.=(args[1].get());
    auto itB.=(args[2].get());
    auto endB.=(args[3].get());
    auto result.=(args[4].get());
    auto cmp.=(args[5].get());
    auto cnd.=(true);
    while (cnd, {
        if (cmp(itA.get(), itB.get()), {
            result.<-(itA.get());
            itA.++();
        }, {
            result.<-(itB.get());
            itB.++();
        });
        result.++();
        if (itA.==(endA), {
            cnd.=(false);
            iterator.move(itB, endB, result);
        });
        if (itB.==(endB), {
            cnd.=(false);
            iterator.move(itA, endA, result);
        });
    });
    return(result);
});

iterator.var sort.=({
    auto begin.=(args[0].get());
    auto end.=(args[1].get());
    auto cmp.=(args[2].get());
    auto size.=(begin.distance(end));
    if(size.<(2), {
    }, {
        auto pivot.=(begin.+(size./(2)));
        iterator.sort(begin, pivot, cmp);
        iterator.sort(pivot, end, cmp);

        auto temp.=(Array());
        temp.resize(size);
        iterator.merge(begin, pivot, pivot, end, temp.begin(), cmp);
        iterator.move(temp.begin(), temp.end(), begin);
    });
    return(end);
});

iterator.var forEach.=({
    auto fun.=(args[2].get());
    for (auto it.=(args[0].get()).!=, args[1].get(), it.++, {
        fun(it.get());
    });
    return(args[1].get());
});

var forEach.=({
    return(iterator.forEach(args[0].get().begin(), args[0].get().end(), args[1].get()));
});

var max.=({
    auto a.=(args[0]);
    auto b.=(args[1]);
    return(if(a.get().>=(b.get()), {
        return(a.get());
    }, {
        return(b.get());
    }));
});

var min.=({
    auto a.=(args[0]);
    auto b.=(args[1]);
    return(if(a.get().<=(b.get()), {
        return(a.get());
    }, {
        return(b.get());
    }));
});

var swap.=({
    auto c;
    c.=(args[0].get());
    args[0].get().=(args[1].get());
    args[1].get().=(c);
    return(args[1].get());
});