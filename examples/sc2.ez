#import("time");
import("algorithm");
import("console");
import("memory");
import("math");#

import("console");
import("devices");
import("time");

auto taskA.=(Task(Root, {
    for (auto i.=(0).<, 10, i.++, {
        console.writeLine("A");
    });
    return("Task A ended.");
}));

console.writeLine(taskA.isReady());
time.sleep(3);
console.writeLine(taskA.isReady());
time.sleep(3);
console.writeLine(taskA.isReady());
time.sleep(3);
console.writeLine(taskA.isReady());
console.writeLine(taskA.get());
console.writeLine(futureB.get());

var EventListener.=(Class(
    Object,
    var task,
    var taskMain,
    var taskLoop,
    var predicate,
    var callback,
    var running,
    {
        running.=(true);
        taskLoop.=({
            if (predicate(), callback);
        });
        taskMain.=({
            predicate.=(args[0].get());
            callback.=(args[1].get());
            while (running, taskLoop);
        });
        task.=(Task(getThis(), taskMain, args[0].get(), args[1].get()));
    }.setName("EventListener"),
    {
        running.=(false);
        task.get();
    }.setName("~~");
));

var arrayLiteral.=({
    return(args);
});


Root.var pos.=(5);
auto dListener.=(EventListener({
    return(devices.keyboard.isKeyDown("d"));
}, {
    pos.--();
    basicOut("d");
}));
auto aListener.=(EventListener({
    return(devices.keyboard.isKeyDown("a"));
}, {
    pos.++();
    basicOut("a");
}));

#while (1, {
    basicOut(pos);
});#

removeChild("dListener");
removeChild("aListener");


console.writeLine("Is that ok?");
#auto A.=(Class(
    Object, 
    {
        basicOut("helloA");
    }.setName("A"),
    Object, 
    {
        basicOut("goodbye");
    }.setName("~~"),
));
auto a.=(A());
auto B.=(Class(
    A,
    {
        A();
        basicOut("helloB");
    }.setName("B")
));
B();
auto f.=({f();});

"launchArgs".debugTree();


auto b.=(B());#
#b.debugTree();#
#getThis().debugTree();#
#throw("stop");#


