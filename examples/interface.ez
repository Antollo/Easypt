
import("nativeInterface");

import("console");
console.controlSequence("1m", "4m", "44m", "91m");
console.writeLine("Bold, underlined text with red font and blue background");
console.controlSequence("0m");
var interface.=(NativeInterface("
    #include <stdio.h>
    #include <interface.h>

    object* promptInt(object* obj, object** args, int size)
    { 
        printf(\"Old value is: %i \\nType in new value: \", getInt(args[0]));
        int input;
        scanf(\"%i\", &input);
        setInt(args[0], input);
        printf(\"New value is: %i \\n\", getInt(args[0]));
        return obj;
    }

    object* createString(object* obj, object** args, int size)
    { 
        object* String = readRecursive(obj, \"String\");
        object* newString = call(String, NULL);
        setString(newString, \"new string value from C\");
        return newString;
    }

    object* callbackForEach(object* obj, object** args, int size)
    {
        for (int i = 1; i < size; i++)
        {
            call(args[0], args[i], NULL);
        }
        return obj;
    }

    object* returnLog(object* obj, object** args, int size)
    {
        object* log = readRecursive(obj, \"log\");
        return log;
    }

    object* createBird(object* obj, object** args, int size)
    { 
        object* Bird = readRecursive(obj, \"Bird\");
        object* newBird = call(Bird, args[0], NULL);
        return newBird;
    }
"));

auto integer.=(7);

auto promptInt.=(interface["promptInt"]);
log(promptInt(integer));

auto createString.=(NativeFunction(interface, "createString"));
log(createString());

auto callbackForEach.=(interface["callbackForEach"]);
callbackForEach(log, 1, 2.3, "Abc");

auto returnLog.=(NativeFunction(interface, "returnLog"));
returnLog()(4, 5.6, "Defg");

auto returnLog.=(NativeFunction(interface, "returnLog"));
returnLog()(4, 5.6, "Defg");

auto createBird.=(NativeFunction(interface, "createBird"));


import("console");

console.writeLine("Normal text");
console.controlSequence("1m", "4m", "44m", "91m");
console.writeLine("Bold, underlined text with red font and blue background");
console.controlSequence("0m");
console.writeLine("Again normal text");


import("console");

log("ab bcd efghIjk".searchRegex("[a-z]+"));
log("aBCd".replaceRegex("[a-z]", "e"));
log("aaaa".matchRegex("[a-z]+"));
log("aAaa".matchRegex("[a-z]+"));

import("system");
#log(system.shellInterface("echo ${1}", "a"));
throw(Exception("a"));#

var Bird.=(Class(
    Object,
    var color,
    {
        color.=(args[0].get());
        log(color, "bird born");
    }.setName("Bird"),
    {
        log("tweet");
    }.setName("sing"),
    {
        log(color, "bird died");
    }.setName("~~")
));

var f.=({
    auto b.=(Bird("b color"));
    let bb.=(Bird("bb color"));
    bb;
});

f();
log("birdy should died");

var a.=(createBird("c color"));
removeChild("a");
debugTrace();
createBird.debugTree();
