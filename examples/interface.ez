
import("nativeInterface");

var interface.=(NativeInterface("
    #include <stdio.h>
    #include <interface.h>

    object* promptInt(object* obj, object** args, int size)
    { 
        printf(\"Old value is: %i \\nType in new value: \", getInt(args[0]));
        int input;
        scanf(\"%i\", &input);
        setInt(args[0], input);
        printf(\"New value is: %i \\n\", getInt(args[0]));
        return obj;
    }

    object* createString(object* obj, object** args, int size)
    { 
        object* String = readRecursive(obj, \"String\");
        object* newString = call(String, NULL);
        setString(newString, \"new string value\");
        return newString;
    }

    object* callbackForEach(object* obj, object** args, int size)
    {
        for (int i = 1; i < size; i++)
        {
            call(args[0], args[i], NULL);
        }
        return obj;
    }

    object* returnBasicOut(object* obj, object** args, int size)
    {
        object* basicOut = readRecursive(obj, \"basicOut\");
        return basicOut;
    }
"));

auto integer.=(7);

auto promptInt.=(interface["promptInt"]);
basicOut(promptInt(integer));

auto createString.=(NativeFunction(interface, "createString"));
basicOut(createString());

auto callbackForEach.=(interface["callbackForEach"]);
callbackForEach(basicOut, 1, 2.3, "Abc");

auto returnBasicOut.=(NativeFunction(interface, "returnBasicOut"));
returnBasicOut()(4, 5.6, "Defg");


import("console");

console.writeLine("Normal text");
console.controlSequence("1m", "4m", "44m", "91m");
console.writeLine("Bold, underlined text with red font and blue background");
console.controlSequence("0m");
console.writeLine("Again normal text");


import("console");

basicOut("ab bcd efghIjk".searchRegex("[a-z]+"));
basicOut("aBCd".replaceRegex("[a-z]", "e"));
basicOut("aaaa".matchRegex("[a-z]+"));
basicOut("aAaa".matchRegex("[a-z]+"));

i.debugTree();

throw(Exception("a"));
